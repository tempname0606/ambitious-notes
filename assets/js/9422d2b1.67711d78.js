"use strict";(self.webpackChunkambitious_notes=self.webpackChunkambitious_notes||[]).push([[745],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),k=l(a),m=r,h=k["".concat(s,".").concat(m)]||k[m]||u[m]||o;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[k]="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1342:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const o={title:"Stacks in Java",description:"Java-related Set stuff for Leetcodez"},i=void 0,c={unversionedId:"stack/stacks_java",id:"stack/stacks_java",title:"Stacks in Java",description:"Java-related Set stuff for Leetcodez",source:"@site/docs/stack/stacks_java.md",sourceDirName:"stack",slug:"/stack/stacks_java",permalink:"/ambitious-notes/stack/stacks_java",draft:!1,tags:[],version:"current",frontMatter:{title:"Stacks in Java",description:"Java-related Set stuff for Leetcodez"},sidebar:"tutorialSidebar",previous:{title:"Stack",permalink:"/ambitious-notes/category/stack"}},s={},l=[{value:"Initialization",id:"initialization",level:2},{value:"Which one to choose?",id:"which-one-to-choose",level:3},{value:"Operations on Stack Class",id:"operations-on-stack-class",level:2},{value:"Push to the top of the stack",id:"push-to-the-top-of-the-stack",level:3},{value:"Pop from the top of the stack",id:"pop-from-the-top-of-the-stack",level:3},{value:"Peeking",id:"peeking",level:3},{value:"Check if Stack is empty",id:"check-if-stack-is-empty",level:3}],p={toc:l},k="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(k,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"initialization"},"Initialization"),(0,r.kt)("p",null,"There are two ways of creating a Stack in Java"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"With the ",(0,r.kt)("inlineCode",{parentName:"li"},"Stack")," class: ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Stack<T> stack = new Stack<>();\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"With the ",(0,r.kt)("inlineCode",{parentName:"li"},"Deque")," interface: ",(0,r.kt)("inlineCode",{parentName:"li"},"Deque<T> stack = new ArrayDeque();"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Deque<T> stack = new ArrayDeque<>();\n")),(0,r.kt)("h3",{id:"which-one-to-choose"},"Which one to choose?"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Deque")," interface brings us more flexibility than the ",(0,r.kt)("inlineCode",{parentName:"li"},"Stack")," class."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Stack")," class is Synchronized whereas the ",(0,r.kt)("inlineCode",{parentName:"li"},"Deque")," interface isn't."),(0,r.kt)("li",{parentName:"ol"})),(0,r.kt)("h2",{id:"operations-on-stack-class"},"Operations on Stack Class"),(0,r.kt)("h3",{id:"push-to-the-top-of-the-stack"},"Push to the top of the stack"),(0,r.kt)("p",null,"Pushing is done in constant time ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),". Returns the argument back."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Stack<T> stack = new Stack<>();\nstack.push(1); // Returns 1\n")),(0,r.kt)("h3",{id:"pop-from-the-top-of-the-stack"},"Pop from the top of the stack"),(0,r.kt)("p",null,"Popping is done in constant time ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),". It returns the top element from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Stack")," if not empty, otherwise throws ",(0,r.kt)("inlineCode",{parentName:"p"},"EmptyStackException"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Stack<T> stack = new Stack<>();\nstack.push(1); // Returns 1\nstack.pop(); // Stack is now empty, pop returns number 1\n")),(0,r.kt)("h3",{id:"peeking"},"Peeking"),(0,r.kt)("p",null,"Peeking is done in constant time ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),". It returns the top element from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Stack")," without removing it if not empty, otherwise throws ",(0,r.kt)("inlineCode",{parentName:"p"},"EmptyStackException"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Stack<T> stack = new Stack<>();\nstack.push(1); // Returns 1\nstack.peek(); // Returns 1 without removing from the stack\n")),(0,r.kt)("h3",{id:"check-if-stack-is-empty"},"Check if Stack is empty"),(0,r.kt)("p",null,"To check if the ",(0,r.kt)("inlineCode",{parentName:"p"},"Stack")," is empty"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Stack<T> stack = new Stack<>();\nstack.isEmpty(); // Returns true\nstack.push(1); // Returns 1\nstack.isEmpty() // returns false\n")),(0,r.kt)("p",null,"changes"))}u.isMDXComponent=!0}}]);